= Possible Use Case

Multi signature transactions are an integral part to Bitcoin script since it's beginning, and there are many proven and theoretical problems that can be solved with this technology. This is a critical theoretical analysis of these proposed use cases.

== n-of-n Second Factor Authentication

In order to securely hold on chain bitcoin, Alice only needs to keep a private key hidden from others. Anyone with the knowledge of the cryptographic secret has full access to the corresponding UTXO. As non-scarce information is easily shared, there is a risk that the single private key is leaked. There is no second factor needed to move the funds, thus the slightest mistake could lead to sharing of the key, which means a complete loss of funds. Although a single signature is convenient, fast, and good for small denominations, multi sig can be used to add redundancy and security. 

For example, Alice can specify a n-of-n multi signature script, let's say 2-of-2, where Alice is the only individual in possession of both private keys, one on a hardware wallet, the other on her phone. Only with a valid signature with both secrets can the UTXO be spent. This is a secure second factor authentication, for example, Alice needs to have access to both her hardware wallet and phone in order to sign a valid spending transaction. In the case that a malicious actor gains undue access to only one of her devices containing the private key, this is not enough to spend the coins. The chance that a hacker is breaking both of her devices is several orders of magnitude more difficult. However, in the case that Alice looses only one of her devices and private key, she looses access to the bitcoin which would rightfully be hers. It is as impossible for her to spend the UTXO with only one key, as it is for a malicious actor.

Thus, n-of-n second factor authentication is a valid defense against the leaking of private keys to unwanted malicious actors. They need to gain access to n private keys in order to have full control over the UTXO, the difficulty exponentially increases as n increases. Especially when Alice stores the private keys in different devices, in different location and with different protocols. However, the n-of-n script does not protect in the case where Alice herself looses access to even only one of the private keys. She can lock herself out of her own money, and this risk increases, as n increases. Although, this is also the case for a single signature script, once that one key is lost, the money is locked indefinitely. The tradeoff for the n-of-n scheme is thus the number of n in relation to the attackers sophistication to break all n security protocols, and the likelihood of Alice herself to loose only one of n keys.

Redeem script:

```console
  n
  <pubKey Alice 1>
  <pubKey Alice 2>
  ...
  <pubKey Alice n>
  n
  OP_CHECKMULTISIG
```

Signature script:

```
  <signature Alice 1>
  <signature Alice 2>
  ...
  <signature Alice n>
```

2-of-3 or 4-of-5 multisig, with one key controlled by the security specialistfootnote:[See BitGo and Casa], and all others by clients. Approval / 2FA for each spend, but no full custody and risk of loss of keys.

== Group Fund Management

Business partners share access to funds in a n-of-n multi sig, so that all peers need to agree on the allocation of funds. Potentially improved with optional time locks. [2-of-2 always, 1-of-2 after 1000 blocks]

== Escrow

Upfront security deposit for a market place / exchange, with semi-trusted third party arbitrator to sign in case of dispute.footnote:[See Bisq 2-of-3 & HodlHodl 2-of-2]

2-of-3 [Alice, Bob, Charlie] can always spend from this script, after 1000 blocks, 

Redeem Script for time locked escrow: 
```console
    IF 
      IF 
        2 
      ELSE 
        <1000 blocks> CHECKSEQUENCEVERIFY DROP 
        <Public Key 1> CHECKSIGVERIFY 
        1
      ENDIF 
      <Public Key 2> <Public Key 3> <Public Key 4> 3 CHECKMULTISIG 
    ELSE 
      <3000 blocks> CHECKSEQUENCEVERIFY DROP 
      <Public Key 1> CHECKSIGVERIFY 
    ENDIF
````