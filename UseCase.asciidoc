= Possible Use Case

Multi signature transactions are an integral part to Bitcoin script since it's beginning, and there are many proven and theoretical problems that can be solved with this technology. This is a critical theoretical analysis of these proposed use cases.

= Single Party Multi Signatures

== n-of-n Second Factor Authentication

In order to securely hold on chain bitcoin, Alice only needs to keep a private key hidden from others. Anyone with the knowledge of the cryptographic secret has full access to the corresponding UTXO. As non-scarce information is easily shared, there is a risk that the single private key is leaked. There is no second factor needed to move the funds, thus the slightest mistake could lead to sharing of the key, which means a complete loss of funds. Although a single signature is convenient, fast, and good for small denominations, multi sig can be used to add redundancy and security. 

For example, Alice can specify a n-of-n multi signature script, let's say 2-of-2, where Alice is the only individual in possession of both private keys, one on a hardware wallet, the other on her phone. Only with a valid signature with both secrets can the UTXO be spent. This is a secure second factor authentication, for example, Alice needs to have access to both her hardware wallet and phone in order to sign a valid spending transaction. In the case that a malicious actor gains undue access to only one of her devices containing the private key, this is not enough to spend the coins. The chance that a hacker is breaking both of her devices is several orders of magnitude more difficult. However, in the case that Alice looses only one of her devices and private key, she looses access to the bitcoin which would rightfully be hers. It is as impossible for her to spend the UTXO with only one key, as it is for a malicious actor.

Thus, n-of-n second factor authentication is a valid defense against the leaking of private keys to unwanted malicious actors. They need to gain access to n private keys in order to have full control over the UTXO, the difficulty exponentially increases as n increases. Especially when Alice stores the private keys in different devices, in different location and with different protocols. However, the n-of-n script does not protect in the case where Alice herself looses access to even only one of the private keys. She can lock herself out of her own money, and this risk increases, as n increases. Although, this is also the case for a single signature script, once that one key is lost, the money is locked indefinitely. The tradeoff for the n-of-n scheme is thus the number of n in relation to the attackers sophistication to break all n security protocols, and the likelihood of Alice herself to loose only one of n keys.

Redeem script:

```console
  n
  <pubKey Alice 1>
  <pubKey Alice 2>
  ...
  <pubKey Alice n>
  n
  OP_CHECKMULTISIG
```

Signature script:

```
  <signature Alice 1>
  <signature Alice 2>
  ...
  <signature Alice n>
```

== m-of-n Second Factor Authentication

The main risk of n-of-n multi sig is that the loss of only one key leads to a complete loss of funds. Although this is very secure against malicious actors trying to steal money, it does not protect Alice from herself loosing access to one single key. A m-of-n script can provide further benefits that neither single, nor n-of-n multi sig have.

Alice can assign a m-of-n multi sig script to a UTXO, such that she can only spend the coin with a total of m signatures. For a 2-of-3 example, she stores one key on her mobile wallet, another on her hardware wallet, and the third on a cold storage paper wallet. For every day transactions, she will use her phone and hardware wallet to build and sign the valid signature. These two wallets are user friendly enough to provide swift and easy execution of the spending protocol. A malicious actor needs to gain access to m private keys and this increases in difficulty with higher m and more complex and secure key generation and storage protocols. A 2-of-3 multi sig has the same anti theft protection as a 2-of-2 multi sig. The attacker needs to gain access to both Alice's phone and hardware wallet, or one of them in addition to the cold storage. However, in the case that Alice looses one of her every day keys, let's assume her mobile wallet, she can get the paper wallet key out of cold storage, and use it as the second factor together with her hardware wallet. She can decrease the risk of loss of private keys drastically with such a script.

The m-of-n multi sig script provides simultaneous protection against theft and loss of private keys. The malicious actor needs to gain access to m, not n, private keys in order to generate a valid spending transaction. This provides the same level of protection as a m-of-m multi sig script would. However, contrarily to n-of-n scripts, Alice can afford to loose n-m private keys before she herself looses access to the UTXO. She can have m convenient and easy to use keys, like mobile and hardware wallets, which she can interact with for every day spending. For redundancy however, she also has n-m cold storage keys, which are difficult to access, for example a paper wallet hidden in a remote safe. She only needs to reveal these keys in the case where she looses access to some of the every day keys. However, the UTXO is locked when she m private keys are lost, same as with a m-of-m multi sig script. 

Redeem script:

```console
  m
  <pubKey Alice 1>
  <pubKey Alice 2>
  ...
  <pubKey Alice n>
  n
  OP_CHECKMULTISIG
```

Signature script:

```
  <signature Alice 1>
  <signature Alice 2>
  ...
  <signature Alice m>
```

= Multi Party Multi Signatures

2-of-3 or 4-of-5 multisig, with one key controlled by the security specialistfootnote:[See BitGo and Casa], and all others by clients. The bank gives approval / 2FA for each spend, but without full custody. The bank can not send the funds without the client signature, thus there is no risk of theft. There are some privacy concerns, because the bank has the knowledge of the customers public keys and it will co-sign all the transactions. The bank knows how much is send when to whom, maybe even for what.

== Group Fund Management

Business partners share access to funds in a n-of-n multi sig, so that all peers need to agree on the allocation of funds. Potentially improved with optional time locks. [2-of-2 always, 1-of-2 after 1000 blocks]

== Escrow

Upfront security deposit for a market place / exchange, with semi-trusted third party arbitrator to sign in case of dispute.footnote:[See Bisq 2-of-3 & HodlHodl 2-of-2]

2-of-3 [Alice, Bob, Charlie] can always spend from this script, after 1000 blocks, 

Redeem Script for time locked escrow: 
```console
    IF 
      IF 
        2 
      ELSE 
        <1000 blocks> CHECKSEQUENCEVERIFY DROP 
        <Public Key 1> CHECKSIGVERIFY 
        1
      ENDIF 
      <Public Key 2> <Public Key 3> <Public Key 4> 3 CHECKMULTISIG 
    ELSE 
      <3000 blocks> CHECKSEQUENCEVERIFY DROP 
      <Public Key 1> CHECKSIGVERIFY 
    ENDIF
```

== Vault

Script with m-of-n multisig, timelock and designated output address. It can only be spend with m signatures after a specified time and only to one previously agreed upon address. This might be useful for cold storage that can only be spend to another script that is controlled by the same owner.