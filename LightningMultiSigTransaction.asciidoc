= Multi Signature Transaction in Lightning Payment Channels


These are several possible approaches to solve the problem. Maybe changing the commitment transaction scrip, or enforcing the  multi sig on a higher wallet level, not on the blockchain directly.

== Commitment transaction script


Redeem Script: `0 sigAlice sigBob 2 pubkeyAlice pubkeyBob 3 sigDave pubkeyDave` 

Witness script: `0 <signature 4> 1 <Public Key 4> CHECKSIG 0 <signature 1> 1 <Public Key 1> <Public Key 2> 2 CHECKMULTISIG` // Correct?

ScriptPubKey: `0 SHA256(<witnessScript>)`

Now each channel state update requires 2/3 sigs from ABC + sig from D.footnote:[James C. https://twitter.com/digi_james/status/1083403533230198784]

== Key aggregation


Aggregated link:/Research.asciidoc/#schnorr[Schnorr signatures] to one key of the 2-of-2 lightning payment channel.

== Stop HTLC before / during route

Regular 2-of-2 payment channel, but hold the HTLCs and only release for route until a threshold of m-of-n secrets is reveiled/action is taken. Possibly with macaroons, but how do you make the software reliant?footnote:[Alex Bosworth https://lightningcommunity.slack.com/archives/C6WS7BEDV/p1547489731016500?thread_ts=1547150765.007200&cid=C6WS7BEDV]

HODL-HTLC: Instead of immediately settle the HTLC, the receiver waits for a time period or until he has access to some secret information. Receiver can check conditions, sender security deposit, Preimage is set by sender and only revealed to receiver when action is performed [atomic swap]

== M-of-n RPC access rights to node with 2-of-2 payment channels

Regular 2-of-2 payment channel, but limited access is given to n parties, so that m have to approve the transaction. But, administor right and hardware access are not trustless, maybe read only HSM,


