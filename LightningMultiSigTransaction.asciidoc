= Multi Signature Transaction in Lightning Payment Channels


These are several possible approaches to solve the problem. Maybe changing the commitment transaction scrip, or enforcing the  multi sig on a higher wallet level, not on the blockchain directly.


== Commitment transaction script

Redeem Script: `0 sigAlice sigBob 2 pubkeyAlice pubkeyBob 3 sigDave pubkeyDave` 

Witness script: `0 <signature 4> 1 <Public Key 4> CHECKSIG 0 <signature 1> 1 <Public Key 1> <Public Key 2> 2 CHECKMULTISIG` // Correct?

ScriptPubKey: `0 SHA256(<witnessScript>)`

Now each channel state update requires 2/3 sigs from ABC + sig from D.footnote:[James C. https://twitter.com/digi_james/status/1083403533230198784]


== Key aggregation

Aggregated link:/Research.asciidoc/#schnorr[Schnorr signatures] to one key of the 2-of-2 lightning payment channel. The aggregation of m-of-n keys compute to the key pair which is referred in the funding transaction. Only with m-of-n signatures of the individual keys, can a valid aggregated signature be computed, with which a valid commitment transaction update can be committed to. The blockchain cannot tell the difference between a regular 2-of-2, and an aggregated 2-of-2 payment channel, thus, the aggregation should [?] be "backwards compatible". 


== Split Revocation Basepoint Secret

The `revocation_basepoint_secret` is splitted into m-of-n parts, so that the counterparty will only release pre-image when the `per_commitment_secret` is fully transmitted. Schnorr aggregation or some other threshold signature type should work, but Shamir's secret sharing not. When David receives the revocation basepoint, A,B,C no longer claim the previous state of the channel. Current script could be tweaked with 2 checks so that there are 2 revocation points required. footnote:[Slack conversation with Alex Bosworth https://lightningcommunity.slack.com/archives/C6WS7BEDV/p1548846901024100]


== Stop HTLC before / during route

Regular 2-of-2 payment channel, but hold the HTLCs and only release for route until a threshold of m-of-n secrets is revealed/action is taken. Possibly with macaroons, but how do you make the software reliant?footnote:[Alex Bosworth https://lightningcommunity.slack.com/archives/C6WS7BEDV/p1547489731016500?thread_ts=1547150765.007200&cid=C6WS7BEDV]

HODL-HTLC:footnote:[Joost Jager Pull Request #2022] Instead of immediately settle the HTLC, the receiver waits for a time period or until he has access to some secret information. Receiver can check conditions, sender security deposit, Preimage is set by sender and only revealed to receiver when action is performed [atomic swap]

M-of-n hash preimages are required for the HTLC to be fulfilled. Timeouts are at the minimum the escrow timeouts. Sender, escrow and receiver [or others] have the n pre images. In most cases, sender and receiver will disclose preimage themselves without the need for escrow actionfootnote:[2-of-3 Instant Escrow, or How to Do "2-of-3 Multisig Contract" Equivalent on Lightning, Joseph Poon: https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-January/000403.html]

```console
### This is a complete copy of Joseph's proposal in mail - need to verify and check for optimization ###

Assume the order in the stack is Sender, Escrow, Recipient.

For PAID 2-of-3 Escrow+Recipient, the HTLC stack is:
        <BobSig> <0> <EscrowPreimageR> <RecipientPreimageR> <0>

If it's REFUND because 2-of-3 has not been redeemed in time:
        <AliceSig> <0> <1>

Bitcoin Script (Alice's, we use OP_1/OP_0 to distinctly show computed
true/false. 0/1 is for supplied data as part of the
sigScript/redeemScript stack):
------------------------------------------------------------------------

//Paid
OP_IF
        <CSVDelay> OP_DROP OP_CSV //under rusty's CSV style

        //Stack: <BobSig> <0> <EscrowPreimageR> <RecipientPreimageR>
        //Recipient must agree to receive funds.
        OP_HASH160 <RecipientHash> OP_EQUALVERIFY

        //Stack: <BobSig> <0> <EscrowPreimageR>
        //Either the Sender or Escrow must consent for payment
        OP_HASH160 <EscrowHash> OP_EQUAL
        //Stack: <BobSig> <0> <OP_1>
        OP_SWAP
        //Stack: <BobSig> <OP_1> <0>
        OP_HASH160 <SenderHash> OP_EQUAL
        //Stack: <BobSig> <OP_1> <OP_0>
        OP_BOOLOR
        //Stack: <BobSig> <OP_1>
        OP_VERIFY

        <BobPubKey>
        //Stack: <BobSig> <BobPubKey>
//Refund
OP_ELSE
        //Stack: <AliceSig> <0>
        OP_HASH160 OP_DUP
        <R-HASH> OP_EQUAL
        OP_NOTIF
                <CSVDelay> OP_DROP OP_CSV
        OP_ENDIF

        <HTLCTimeout> OP_DROP OP_CLTV

        //Stack: <AliceSig>
        <AlicePubKey>
        //Stack: <AliceSig> <AlicePubKey>
OP_ENDIF
OP_CHECKSIG
------------------------------------------------------------------------
```

== M-of-n RPC access rights to node with 2-of-2 payment channels

Regular 2-of-2 payment channel, but limited access is given to n parties, so that m have to approve the transaction. But, administer right and hardware access are not trustless, maybe read only HSM,

== Submarine Swap to On Chain MultiSig

An atomic swap where Alice is selling lightning liquidity and buys on chain capacity, which is locked in a m-of-n multisig redeem script. Regular instant funding of on chain multisig, but not the desired shared ownership of a lightning multi sig to spend. Probably not of interest.