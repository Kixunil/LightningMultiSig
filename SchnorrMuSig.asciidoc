# Schnorr Signatures

The Schnorr signature scheme footnote:[Claus-Peter Schnorr. Efficient Signature Generation by Smart Cards. J. Cryptology, 4(3):161–174, 1991.] uses a cyclic group _G_ of prime order _p_, a generator _g_ of _G_, and a hash function _H_. It uses a random number private key _x_, and public key _X_, with _(x, X) ∈ {0, …, p-1} * G_ where _X = gx_. To sign a message _m_, the signer generates a random number integer _r_ in _Zp_ and computes the nonce _R=gr_, _c = H(X,R,m)_ footnote:[The key-prefix method with the hash of _R_ and _m_ as described by Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. High-Speed High-Security Signatures. In Bart Preneel and Tsuyoshi Takagi, editors, Cryptographic Hardware and Embedded Systems – CHES 2011, volume 6917 of LNCS, pages 124–142. Springer, 2011.], as well as _s = r + cx_. The signature σ is the tuple _(R,s)_ and this can be verified by _gs = RXc_.

Just like ECDSA, the Schnorr signature scheme is proven secure under the discrete logarithm assumption, defined as followed. Let _(G, p, g)_ be group parameters. An algorithm _A_ is said to _(t,ԑ)_-solve the DL problem w.r.t. _(G, p, g)_ if on input a random group element _X_, it runs in time at most _t_ and returns _x ∈ {0, ..., p − 1}_ such that _X = gx_ with probability at least ԑ, where the probability is taken over the random draw of _X_ and the random coins of _A_. footnote:[See MuSig 2018 Chapter 2.1. Notation and Definitions]


# MuSig

The MuSig paper footnote:[Gregory Maxwell, Andrew Poelstra, Yannick Seurin, and Pieter Wuille. Simple Schnorr Multi-Signatures with Applications to Bitcoin. 2018] describes a simple and efficient multi-signature scheme based on Schnorr. Some of the benefits are key aggregation, signature aggregation and batch verification. The paper includes a security prove footnote:[See MuSig 2018, Chapter 4. Security of the New Multi-Signature Scheme] in the plain public-key model, which is omitted in this paper.

MuSig is parameterized by group parameters _(G,p,g)_ where _p_ is a _k_-bit integer, _G_ is a cyclic group of order _p_, and _g_ is a generator of _G_, and by three hash functions. footnote:[See MuSig 2018, Chapter 3. Our New Multi-Signature Scheme] The total signature size is |_G_| + |_p_|; the public key size |_G_|; and the private key size |_p_|.


## Key Generation

Individual private keys _xi_ are generated with a true random number generator and the public keys _Xi_ are computed with _Xi = gxi_. _X1_ and _x1_ are individual keys of a specific signer; _X2, …, Xn_ are the public keys of the cosigners; and _L = {pubk1 = X1, …, pubkn = Xn}_ is a multiset of all public keys. For _i ∈ {1, …, n}_, the signer computes _ai = Hagg(L,Xi)_ and then aggregates all the individual public keys into the single “aggregated” public key _[cid:image002.png@01D4F085.4E064F60].


## Signing

The signer has knowledge of aggregated _Ẋ_; the message _m_ (in the context of Bitcoin _m_ is the transaction according to the SIGHASH flag); and the multiset _L_. He generates another random integer _r1_ and computes the nonce _[cid:image003.png@01D4F085.4E064F60]_, and the commitment to that nonce _t1 = Hcom(R1)_. The commitment _t1_ is shared with all cosigners, then in the next round of communication the nonce _R1_, and we proceed with the protocol only if all _R_ have been correctly committed for all _ti = Hcom(Ri)_ with _i ∈ {2, …, n}_.

The signer computes [cid:image004.png@01D4F085.4E064F60]  , _c = Hsig(Ẋ,R,m)_ , and _s1 = r1 + ca1x1 mod p_ , s1 is send to all cosigners. After all s2, …, sn have been received, the signer computes _[cid:image005.png@01D4F085.4E064F60]. The signature is _σ = (R,s)_.


## Verification
The verifier has a multiset of public keys _L_, a message _m_, and a signature _σ_. With this public information, the verifier computes _ai_, _Ẋ_ and _c_. The signature is valid only if [cid:image006.png@01D4F085.4E064F60] . Due to key aggregation, the verification is similar to the standard Schnorr scheme, and secure variants of the MuSig scheme are discussed in the original paper footnote:[ MuSig 2018, Chapter 4.3 Discussion].


## Key Aggregation

As described earlier, each cosigner generates their own individual private public key pair (_X,x_), and only that cosigner has knowledge of this secret key _xi_. In the first round of communication, all cosigners share their public keys, anyone can build the multiset _L_ and calculates _ai_ by hashing _L_ and _Xi_. For _a1_, the hash pre-image contains all the public keys once, but _X1_ twice. The aggregated public key _[cid:image002.png@01D4F085.4E064F60] is indistinguishable from any other Schnorr public key. If only _Ẋ_ is known, then the individual public keys _Xi_ cannot be computed. Anyone with knowledge of all the public keys _Xi_ can compute [and thus send bitcoin to] this aggregated public key _Ẋ_, without collaboration from the peers. Thus, the on-chain commitment to this MuSig is the exact same virtual size and has the same mining fee requirement as . Therefore, MuSig is both a privacy and scalability improvement.

Although there is the aggregated public key _Ẋ_, there is no “aggregated private key”. In order to produce a valid signature while defending against the rogue key attack footnote:[Thomas Ristenpart and Scott Yilek. The Power of Proofs-of-Possession: Securing Multiparty Signatures against Rogue-Key Attacks. In Moni Naor, editor, Advances in Cryptology - EUROCRYPT 2007, volume 4515 of LNCS, pages 228–245. Springer, 2007.] footnote:[See MuSig 2018 chapter 5.3. Cross-Input Multi-Signatures], all cosigners have to collaborate in a three step footnote:[whilst a two-step round would be possible, it is larger in signature size and computational cost of signing and verification.] communication signing ceremony. First sharing a nonce commitment _ti_, then the nonce _Ri_, and finally the partial signatures _si_. Only when all _i_ partial signatures are available can the signer produce the valid signature _σ_ which contains the aggregated nonce _R_ and _s_ part of the signature. The verifier knows only that [all of] the signer[s] has [have] agreed to that signature and thus the spending of the bitcoin, but he does not know whether this is only one single key pair, or several key pairs in aggregation. Further, it could be a collaborative lightning network channel close, a collaborative taproot footnote:[Maxwell. Taproot: Privacy preserving switchable scripting. Bitcoin-dev mailing list. Jan 23 2018] or graftroot footnote:[Maxwell. Graftroot: Private and efficient surrogate scripts under the taproot assumption. Bitcoin-dev mailing list. Feb 05 2018] transaction, or a scriptless script atomic swap footnote:[Poelstra. Scriptless scripting and deniable swaps. Mimblewimble team mailing list. Feb 3 2017].